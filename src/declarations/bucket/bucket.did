type UserId = principal;
type Time = int;
type Repost = 
 record {
   createdAt: Time;
   user: UserId;
 };
type PostImmutable = 
 record {
   comment: vec Comment;
   content: text;
   createdAt: Time;
   feedCanister: principal;
   index: nat;
   like: vec Like;
   postId: PostId;
   repost: vec Repost;
   user: UserId;
 };
type PostId = text;
type NewRepost = vec Repost;
type NewLike = vec Like;
type NewComment = vec Comment;
type Like = 
 record {
   createdAt: Time;
   user: UserId;
 };
type Comment = 
 record {
   content: text;
   createdAt: Time;
   user: UserId;
 };
type Bucket = 
 service {
   batchStoreFeed: (vec PostImmutable) -> ();
   getCommentFetchCanister: () -> (principal) query;
   getLatestFeed: (nat) -> (vec PostImmutable) query;
   getLikeFetchCanister: () -> (principal) query;
   getPost: (text) -> (opt PostImmutable) query;
   getPostNumber: () -> (nat) query;
   getPosts: (vec text) -> (vec PostImmutable) query;
   storeFeed: (PostImmutable) -> (bool);
   updateCommentFetchCanister: (principal) -> ();
   updateLikeFetchCanister: (principal) -> ();
   updatePostComment: (text, NewComment) -> (bool);
   updatePostLike: (text, NewLike) -> (bool);
   updatePostRepost: (text, NewRepost) -> (bool);
 };
service : (principal, principal, principal) -> Bucket
